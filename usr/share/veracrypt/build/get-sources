#!/bin/sh
# File: get-sources
# WORKHERE: if all the dls fail, check the usr/share/${package}/source/ dir
sha256sumfile="${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/inc/sha256sum.txt"

getsource() {
   # call: getsource http://sourcefile.tar.gz ~/rpmbuilddir/SOURCES/filename.tar.gz
   # will check the sha256sum file to ensure good download

   local sourceurl="${1}"
   local destfile="${2}"
   local destfileshort=$( echo "${destfile}" | sed -e 's4^.*\/44;' )
   local goodsha=$( awk "\$2 == \"${destfileshort}\" {print;}" ${sha256sumfile} 2>/dev/null | cut -d' ' -f1 )

   touch "${destfile}" 2>/dev/null || { echo "Cannot modify ${destfile}. Run as root, perhaps. Aborted."; exit 1; }
   local attempts=0
   local thesecurlopts=""
   thissha=$( sha256sum "${destfile}" 2>/dev/null | cut -d' ' -f1 )
   if ! test "${thissha}" = "${goodsha}";
   then
      echo "Fetching ${sourceurl}"
      while test ${attempts} -le 6;
      do
         { curl "${sourceurl}" ${thesecurlopts} --progress-bar --refer "${sourceurl}" > "${destfile}"; } 2>&1 | grep -viE 'certificate|the domain name|^\s*$|ssl|insecure|cacert|bundle'
         # verify good download
         thissha=$( sha256sum "${destfile}" 2>/dev/null | cut -d' ' -f1 )
         if ! test -f "${destfile}" || test "$( stat -c "%s" "${destfile}" 2>/dev/null )" -lt 1000 || ! test "${thissha}" = "${goodsha}";
         then
            case "${attempts}" in
            2) test "$( ps -p $$ | xargs | awk '{print $NF}')" = "bash" && test -x /usr/bin/bp && . /usr/bin/bp --noclear --noglobalprofile 1>/dev/null 2>&1;;
            3) unset http_proxy; unset https_proxy;;
            4)
               # ignore certificate errors
               thesecurlopts="-k"
               # possibility: do a regex substitution like the old install-ffs.sh script does, to point to an alternate server
               ;;
            5)
               # try removing the ssl
               thesecurlopts=""
               sourceurl="$( echo "${sourceurl}" | sed -r -e 's4(ht|f)tps:\/\/4\1tp:\/\/4;' )"
               ;;
            6) echo "File failed to download: ${sourceurl}. Aborted." && exit 1;;
            esac
         else
            # shortcircuit because it the sha256 sum matches      
            break
        fi
        attempts=$(( attempts + 1 ))
      done
   fi
}

# Define all %global variables as shell variables as well as in the sed script
tmpfile1="$( mktemp )"
filterfile1="$( mktemp )"
grep -E "^\s*%global" "${rpmbuilddir}/SOURCES/${packagespecfile}" | awk '{$1="";$2=$2"=";print;}' | sed -r -e 's/\s*=\s*/=/g;' -e 's/^\s*//;' > "${tmpfile1}"
. "${tmpfile1}"
sed -r -e 's4^4s/%\\{4;' -e 's/=/\\}\//;' -e 's4$4\/g;4;' "${tmpfile1}" > "${filterfile1}"

# Get additional ones that are harder to fetch
dist="$( rpm --showrc | grep -E "dist\s*\." | awk '{print $3}' )"

# Interpret the rpm spec file and download to ~/rpmbuild/SOURCES all the Source[0-9]?: files.
getthesefiles1="$( mktemp )"
pushd "${rpmbuilddir}/SOURCES" 1>/dev/null 2>&1
grep -E "^\s*Source.?:" "${rpmbuilddir}/SOURCES/${packagespecfile}" | \
   awk '{$1="";print;}' | \
   sed -r -e "
s/%\{name\}/${package}/g;
s/%\{version\}/${shortversion}/g;
s/%\{\??dist\}/${dist}/g;
s/^\s*//;
" -f "${filterfile1}" | \
# limit to only remote sources
   grep -iE "(https?|ftps?)" > "${getthesefiles1}"
#echo "-------------------"; cat "${getthesefiles1}"; echo "----DONE-----"

# remove local copy if already exists
#sed 's4^.*\/44' "${getthesefiles1}" | xargs -n1 -I'[]' rm -f [] 2>/dev/null

# download sources
while read line;
do
   destfile="${rpmbuilddir}/SOURCES/$( echo "${line}" | sed -r -e 's4^.*\/44;' )"
#"${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/inc/sha256sum.txt"
   getsource "${line}" "${destfile}"
   echo "${destfile}" | grep -qiE "\.patch" && /bin/cp -pf "${destfile}" "${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/source/"
done < "${getthesefiles1}"

popd 1>/dev/null 2>&1;
rm -f "${tmpfile1}" "${filterfile1}" "${getthesefiles1}" 1>/dev/null 2>&1
